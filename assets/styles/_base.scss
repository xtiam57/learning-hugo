@import 'mixins';

:root {
  @each $color, $value in $theme-vars {
    --cm-#{$color}: #{$value};
  }
}

::selection {
  color: $white-color;
  background: $secondary-color;
}

body {
  min-height: 100vh;
  display: grid;
  grid-template-columns: 100%;
}

main {
  grid-area: main;
  overflow: hidden;
}

// Text colors
@each $color, $value in $theme-colors {
  .text-#{$color} {
    color: $value;
  }
}

.text-center { text-align: center !important; }
.text-left { text-align: left !important; }
.text-right { text-align: right !important; }

.container {
  @include make-container();
}

// Thanks to https://css-tricks.com/full-width-containers-limited-width-parents/
.full-width {
  left: 50%;
  margin: ($margin-base * 1.5) -50vw;
  position: relative;
  right: 50%;
  width: 100vw;
  display: block;
}

// Base on https://css-tricks.com/full-width-containers-limited-width-parents/
.fit-width {
  left: 50%;
  margin: ($margin-base * 1.5) -50vw;
  padding: 0 15vw;
  position: relative;
  right: 50%;
  width: 100vw;
  display: block;

  @media (max-width: 960px) {
    padding: 0;
  }
}

figure {
  overflow: hidden;

  &.rounded {
    img {
      border-radius: 9999px;
    }
  }

  figcaption {
    text-align: center;
    font-style: italic;
    font-size: $font-size-sm;
    margin-top: $margin-base * 0.5;
    @include make-container();

    p {
      margin: 0;
    }
  }
}

.float-left { float: left !important; }
.float-right { float: right !important; }

@keyframes lazyload {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}

.lazyloaded {
  animation: lazyload $lazyload-time ease;
}

@include make-regular-layout();
@include make-bare-layout();
